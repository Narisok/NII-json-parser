#ifndef _NII_JSON_
#define _NII_JSON_

#include "Json/entities.hpp"
#include "Json/deserializator.hpp"


namespace nii::json
{
    class json
    {
     using j_wrapper = entities::wrapper;
     
    public:

        inline json()
                :_object()
            {}

        inline json(const std::string& str)
                :_object()
            {
                try{
                    auto obj = deserializator::parse(str);
                    _object = std::move(*obj);
                    delete obj;
                } catch(const char*str) { std::cout << "ERROR: " << str << std::endl; }
                catch(std::exception& exeption) { std::cout << "ERROR: " << exeption.what() << std::endl;}
                catch(...) { std::cout << "ERROR has been ocured" << std::endl; }
            }

        inline j_wrapper operator[](const std::string& str) {
            return _object.get(str);
        }

        inline std::string serialize() {
            return _object.serialize();
        }

    private:
        entities::object _object;
    };
}// namespace nii::json
    
#endif